[{"title":"WebClient and Proxy usage","description":"","text":"<pre><code class=\"csharp hljs\">using (var client = new WebClient())\n{\n    WebProxy p = new WebProxy(\"http://proxy.server:port/\", true);\n    p.Credentials = new NetworkCredential(\"domain\\\\user\", \"password\");\n    WebRequest.DefaultWebProxy = p;\n    client.Proxy = p;\n    //...\n}</code></pre>"},{"title":"ToString() in structures","description":"Using the default operator","text":"<pre><code class=\"csharp hljs\">public struct S\n{\n    public int V;\n    public bool B;\n\n    public S(int V, bool B)\n    {\n        this.V = V;\n        this.B = B;\n    }\n\n    public override string ToString()\n    {\n        return String.Format(\"{0}, {1}\", V, B);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        S s1 = new S();\n        S s2 = new S(7, true);\n        S s3 = default (S);\n\n        Console.WriteLine(s1); // 0, False\n        Console.WriteLine(s2); // 7, True\n        Console.WriteLine(s3); // 0, False\n    }\n}</code></pre>"},{"title":"Constructor cnaining","description":"","text":"<pre><code class=\"csharp hljs\">class A\n{\n    public int N;\n   \n    public A()\n    {\n        Console.WriteLine(\"A::ctor()\");\n    }\n}\n\nclass B: A\n{\n    public B()\n    {\n        Console.WriteLine(\"B::ctor()\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        B b = new B();\n        // Output:\n        // A::ctor()\n        // B::ctor()\n    }\n}</code></pre>"},{"title":"Using of nested classes","description":"Nested classes have access to their host's privates","text":"<pre><code class=\"csharp hljs\">class A\n{\n    private int N;\n   \n    public class Nested\n    {\n        public void Set(A a, int N)\n        {\n            a.N = N;\n        }\n   \n        public void Show(A a)\n        {\n            Console.WriteLine(a.N);\n        }\n    }\n   \n    public A(int N)\n    {\n        this.N = N;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var n = new A.Nested();\n        var a1 = new A(7);\n        n.Show(a1);              // 7\n       \n        n.Set(a1, 100500);\n        n.Show(a1);              // 100500\n    }\n}</code></pre>"},{"title":"Using interfaces","description":"Interface implementation must be only public","text":"<pre><code class=\"csharp hljs\">public interface II\n{\n    void M();\n}\n\npublic class C: II\n{\n    // Interface implementation must be only public.\n    // Otherwise compiler generates an error:\n    // error CS0737: 'Test.C' does not implement interface member 'Test.II.M()'. 'Test.C.M()' cannot implement\n    //               an interface member because it is not public.\n   \n    public void M()\n    {\n    }\n}\n\ninternal sealed class Program\n{\n    static void Main()\n    {\n        II ic = new C();\n    }\n}</code></pre>"},{"title":"IEnumerator GetEnumerator() in classes","description":"It makes possible use the class in the foreach loop (see the generic version in next snippet)","text":"<pre><code class=\"csharp hljs\">public class Collection\n{\n    // NOTE The GetEnumerator method is defined with the interface IEnumerable.\n    // The foreach statement doesn’t really need this interface implemented in the collection\n    // class. It’s enough to have a method with the name GetEnumerator that returns an\n    // object implementing the IEnumerator interface.\n    public IEnumerator GetEnumerator()\n    {\n        yield return 1;\n        yield return 2;\n        yield return 3;\n    }\n}\n\npublic class Program\n{\n    static void Main()\n    {\n        foreach (int n in new Collection())\n        {\n            Console.WriteLine(n);\n        }\n    }\n}</code></pre>"},{"title":"IEnumerator<T> GetEnumerator() in classes","description":"The generic version of the previous snippet","text":"<pre><code class=\"csharp hljs\">public class Collection<T>\n{\n    private T[] _data;\n   \n    public Collection(T[] data)\n    {\n        this._data = data;\n    }\n   \n    public IEnumerator<T> GetEnumerator()\n    {\n        foreach (var i in _data)\n        {\n            yield return i;\n        }\n    }\n}\n\npublic class Program\n{\n    static void Main()\n    {\n        foreach (int n in new Collection<int>(new int[] {1, 2, 3}))\n        {\n            Console.WriteLine(n);\n        }\n    }\n}</code></pre>"},{"title":"LinkedList<T> implementation","description":"[1, p.133-135]","text":"<pre><code class=\"csharp hljs\">public class LinkedListNode<T>\n{\n    public LinkedListNode(T value)\n    {\n        Value = value;\n    }\n    public T Value { get; private set; }\n    public LinkedListNode<T> Next { get; internal set; }\n    public LinkedListNode<T> Prev { get; internal set; }\n}\n\npublic class LinkedList<T>: IEnumerable<T>\n{\n    public LinkedListNode<T> First { get; private set; }\n    public LinkedListNode<T> Last { get; private set; }\n    public LinkedListNode<T> AddLast(T node)\n    {\n        var newNode = new LinkedListNode<T>(node);\n        if (First == null)\n        {\n            First = newNode;\n            Last = First;\n        }\n        else\n        {\n            LinkedListNode<T> previous = Last;\n            Last.Next = newNode;\n            Last = newNode;\n            Last.Prev = previous;\n        }\n        return newNode;\n    }\n    public IEnumerator<T> GetEnumerator()\n    {\n        LinkedListNode<T> current = First;\n        while (current != null)\n        {\n            yield return current.Value;\n            current = current.Next;\n        }\n    }\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n}\n\npublic class Program\n{\n    static void Main()\n    {\n        var list2 = new LinkedList<int>();\n        list2.AddLast(1);\n        list2.AddLast(3);\n        list2.AddLast(5);\n       \n        foreach (int i in list2)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}</code></pre>"},{"title":"IEnumerable","description":"System.Collections.IEnumerable","text":"<pre><code class=\"csharp hljs\">public interface IEnumerable\n{\n    [Pure]\n    [DispId(-4)]\n    IEnumerator GetEnumerator();\n}</code></pre>"},{"title":"IEnumerator","description":"System.Collections.IEnumerator","text":"<pre><code class=\"csharp hljs\">public interface IEnumerator\n{\n    bool MoveNext();\n    Object Current {\n        get; \n    }\n    void Reset();\n}</code></pre>"},{"title":"IEnumerable implementation","description":"","text":"<pre><code class=\"csharp hljs\">public class LinkedList: IEnumerable\n{\n    // ...\n\n    public IEnumerator GetEnumerator()\n    {\n        LinkedListNode current = First;\n        while (current != null)\n        {\n            yield return current.Value;\n            current = current.Next;\n        }\n    }\n}</code></pre>"},{"title":"IEnumerable<T>","description":"System.Collections.Generic.IEnumerable<T>","text":"<pre><code class=\"csharp hljs\">public interface IEnumerable<out T> : IEnumerable\n{\n    new IEnumerator<T> GetEnumerator();\n}</code></pre>"},{"title":"IEnumerator<T>","description":"System.Collections.Generic.IEnumerator<T>","text":"<pre><code class=\"csharp hljs\">public interface IEnumerator<out T> : IDisposable, IEnumerator\n{    \n    new T Current {\n        get; \n    }\n}</code></pre>"},{"title":"IEnumerable<T> implementation","description":"","text":"<pre><code class=\"csharp hljs\">public class LinkedList<T>: IEnumerable<T>\n{\n    // See full code in the example above.\n    public IEnumerator<T> GetEnumerator()\n    {\n        LinkedListNode<T> current = First;\n        while (current != null)\n        {\n            yield return current.Value;\n            current = current.Next;\n        }\n    }\n\n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}</code></pre>"},{"title":"Static in generics","description":"","text":"<pre><code class=\"csharp hljs\">public class StaticDemo<T>\n{\n    public static int x;\n}\n\nclass Program\n{\n    static void Main()\n    {\n\n        // The next 2 lines can be initialized anywhere in a program.\n        StaticDemo<string>.x = 4;\n        StaticDemo<int>.x = 5;\n        Console.WriteLine(StaticDemo<string>.x); // 4\n        Console.WriteLine(StaticDemo<int>.x);    // 5\n    }\n}</code></pre>"},{"title":"typeof","description":"","text":"<pre><code class=\"csharp hljs\">class Program\n{\n    static void Main()\n    {\n        var n = 100;\n        //var t1 = typeof(n);   // Does not work.\n        var t1 = n.GetType();\n        var t2 = typeof(int);\n        Console.WriteLine(t1);  // System.Int32\n\n        Console.WriteLine(t2);  // System.Int32\n \n\n        var sType = typeof(String);\n        Console.WriteLine(sType); // System.String\n    }\n}</code></pre>"},{"title":"Delegates composition","description":"","text":"<pre><code class=\"csharp hljs\">public static Func<T1, TResult> Compose<T1, T2, TResult>(\n    Func<T1, T2> f1, Func<T2, TResult> f2) =>\n        a => f2(f1(a));\n\npublic static Func<T1, TResult> Compose<T1, T2, TResult>(\n    Func<T1, T2> f1, Func<T2, TResult> f2)\n{\n    return a => f2(f1(a));\n}\n\npublic static Func<T1, TResult> Compose<T1, T2, TResult>(\n    Func<T1, T2> f1, Func<T2, TResult> f2)\n{\n    return new Func<T1, TResult>(a => f2(f1(a)));\n}\n\npublic static Func<T1, TResult> Compose<T1, T2, TResult>(\n    Func<T1, T2> f1, Func<T2, TResult> f2)\n{\n    return delegate(T1 a)\n        {\n            return f2(f1(a));\n        };\n}</code></pre>"},{"title":"Func<> delegates","description":"","text":"<pre><code class=\"csharp hljs\">public delegate TResult Func<out TResult>();\npublic delegate TResult Func<in T, out TResult>(T arg);\npublic delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2);\n// ...\npublic delegate TResult Func< \n    in T1, in T2, in T3, in T4,\n    in T5, in T6, in T7, in T8,\n    in T9, in T10, in T11, in T12,\n    in T13, in T14, in T15, in T16, out TResult>(\n        T1 arg1, T2 arg2, T3 arg3, T4 arg4,\n        T5 arg5, T6 arg6, T7 arg7, T8 arg8,\n        T9 arg9, T10 arg10, T11 arg11, T12 arg12,\n        T13 arg13, T14 arg14, T15 arg15, T16 arg16);</code></pre>"},{"title":"Comparison<> delegate","description":"","text":"<pre><code class=\"csharp hljs\">public delegate int Comparison<in T>(T x, T y);</code></pre>"},{"title":"The System.Object class","description":"","text":"<pre><code class=\"csharp hljs\">// Type:\nSystem.Object\n\n// Constructors:\npublic .ctor();\n\n// Methods:\npublic static bool Equals(object objA, object objB);\npublic static bool ReferenceEquals(object objA, object objB);\npublic Type GetType();\npublic virtual bool Equals(object obj);\npublic virtual int GetHashCode();\npublic virtual string ToString();\nprotected object MemberwiseClone();\nprotected virtual void Finalize();\nprivate void FieldGetter(string typeName, string fieldName, ref Object& val);\nprivate void FieldSetter(string typeName, string fieldName, object val);\nprivate FieldInfo GetFieldInfo(string typeName, string fieldName);\n\n// Properties:\n-</code></pre>"},{"title":"Using delegate inside a method","description":"","text":"<pre><code class=\"csharp hljs\">Func<MethodInfo, MethodInfo, int> CompareByVisibility\n    = delegate(MethodInfo x, MethodInfo y)\n{\n    // ...\n}</code></pre>"},{"title":"A delegate internals","description":"","text":"<pre><code class=\"csharp hljs\">class D: System.MulticastDelegate,\n    System.ICloneable,\n    System.Runtime.Serialization.ISerializable\n\n// Constructors:\npublic .ctor(System.Object object, System.IntPtr method);\n\n// Methods:\n▲ public virtual System.Boolean Equals(System.Object obj);\n▲ public virtual System.Int32 GetHashCode();\n▲ public virtual System.Delegate[] GetInvocationList();\n▲ public virtual System.Void GetObjectData(\n        System.Runtime.Serialization.SerializationInfo info,\n        System.Runtime.Serialization.StreamingContext context);\n▲ protected virtual System.Delegate CombineImpl(System.Delegate follow);\n▲ public System.Type GetType();\n▲ public virtual System.String ToString();\n▲ protected virtual System.Reflection.MethodInfo GetMethodImpl();\n▲ protected virtual System.Delegate RemoveImpl(System.Delegate value);\n▲ * protected System.Boolean InvocationListLogicallyNull();\n▲ * protected System.Boolean IsUnmanagedFunctionPtr();\n▲ * protected System.MulticastDelegate NewMulticastDelegate(\n        System.Object[] invocationList,\n        System.Int32 invocationCount);\n▲ * protected System.Void StoreDynamicMethod( \n        System.Reflection.MethodInfo dynamicMethod);\n▲ * protected virtual System.Object GetTarget();\n▲ protected System.Object MemberwiseClone();\n▲ protected virtual System.Void Finalize();\n▲ public System.Object DynamicInvoke(System.Object[] args);\n▲ public System.Reflection.MethodInfo get_Method();\n▲ public System.Object get_Target();\n▲ public virtual System.Object Clone();\n▲ protected virtual System.Object DynamicInvokeImpl(System.Object[] args);\n▲ * protected System.IntPtr AdjustTarget( \n        System.Object target,\n        System.IntPtr methodPtr);\n▲ * protected System.IRuntimeMethodInfo FindMethodHandle();\n▲ * protected System.IntPtr GetCallStub(System.IntPtr methodPtr);\n▲ * protected System.IntPtr GetInvokeMethod();\n▲ * protected System.IntPtr GetMulticastInvoke();\npublic virtual System.IAsyncResult BeginInvoke(\n    System.AsyncCallback callback,\n    System.Object object);\npublic virtual System.Void EndInvoke(System.IAsyncResult result);\npublic virtual System.Void Invoke();\n\n// Properties:\n• public System.Reflection.MethodInfo Method { get; }\n• public System.Object Target { get; }</code></pre>"},{"title":"IAsyncResult","description":"","text":"<pre><code class=\"csharp hljs\">// Type:\nSystem.IAsyncResult\n\n// Methods:\npublic virtual System.Object get_AsyncState();\npublic virtual System.Threading.WaitHandle get_AsyncWaitHandle();\npublic virtual System.Boolean get_CompletedSynchronously();\npublic virtual System.Boolean get_IsCompleted();\n\n// Properties:\n• public System.Boolean IsCompleted { get; }\n• public System.Threading.WaitHandle AsyncWaitHandle { get; }\n• public System.Object AsyncState { get; }\n• public System.Boolean CompletedSynchronously { get; }</code></pre>"},{"title":"AsyncCallback","description":"","text":"<pre><code class=\"csharp hljs\">// Type:\nSystem.AsyncCallback\n[sealed]\n\n// Base Type:\nSystem.MulticastDelegate\n\n// Interfaces:\nSystem.ICloneable\nSystem.Runtime.Serialization.ISerializable\n\n-------------------------------------------------\n\n// Constructors:\npublic .ctor(System.Object object, System.IntPtr method);\n\n// Methods:\n▲ public virtual System.Boolean Equals(System.Object obj);\n▲ public virtual System.Int32 GetHashCode();\n▲ public virtual System.Delegate[] GetInvocationList();\n▲ public virtual System.Void GetObjectData(\n        System.Runtime.Serialization.SerializationInfo info,\n        System.Runtime.Serialization.StreamingContext context);\n▲ protected virtual System.Delegate CombineImpl(System.Delegate follow);\n▲ public System.Type GetType();\n▲ public virtual System.String ToString();\n▲ protected virtual System.Reflection.MethodInfo GetMethodImpl();\n▲ protected virtual System.Delegate RemoveImpl(System.Delegate value);\n▲ * protected System.Boolean InvocationListLogicallyNull();\n▲ * protected System.Boolean IsUnmanagedFunctionPtr();\n▲ * protected System.MulticastDelegate NewMulticastDelegate(\n        System.Object[] invocationList,\n        System.Int32 invocationCount);\n▲ * protected System.Void StoreDynamicMethod( \n        System.Reflection.MethodInfo dynamicMethod);\n▲ * protected virtual System.Object GetTarget();\n▲ protected System.Object MemberwiseClone();\n▲ protected virtual System.Void Finalize();\n▲ public System.Object DynamicInvoke(System.Object[] args);\n▲ public System.Reflection.MethodInfo get_Method();\n▲ public System.Object get_Target();\n▲ public virtual System.Object Clone();\n▲ protected virtual System.Object DynamicInvokeImpl(System.Object[] args);\n▲ * protected System.IntPtr AdjustTarget( \n        System.Object target,\n        System.IntPtr methodPtr);\n▲ * protected System.IRuntimeMethodInfo FindMethodHandle();\n▲ * protected System.IntPtr GetCallStub(System.IntPtr methodPtr);\n▲ * protected System.IntPtr GetInvokeMethod();\n▲ * protected System.IntPtr GetMulticastInvoke();\npublic virtual System.IAsyncResult BeginInvoke(\n        System.IAsyncResult ar,\n        System.AsyncCallback callback,\n        System.Object object);\npublic virtual System.Void EndInvoke(System.IAsyncResult result);\npublic virtual System.Void Invoke(System.IAsyncResult ar);\n\n// Properties:\n• public System.Reflection.MethodInfo Method { get; }\n• public System.Object Target { get; }</code></pre>"},{"title":"Paths processing","description":"","text":"<pre><code class=\"csharp hljs\">public static class Program\n{\n    public static void Main()\n    {\n        var path1 = Path.GetFullPath(@\"C:\\Temp\");  // C:\\Temp\n        var path2 = Path.GetFullPath(@\"C:\\Temp\\\"); // C:\\Temp\\\n        Console.Write(\"Path exists: \");\n        Console.WriteLine(Directory.Exists(path1)); // True.\n        Console.Write(\"Path exists: \");\n        Console.WriteLine(Directory.Exists(path2)); // True.\n        Console.WriteLine(\">>>\");\n        ShowContent(path1);\n        Console.WriteLine(\">>>\"); // The results are the same.\n        ShowContent(path2);\n      \n        Console.WriteLine(\">>>\");\n        FileInfo fi = new FileInfo(@\"C:\\Temp\\help.txt\");\n        Console.WriteLine(fi.Directory); // By default, a path does not end with '\\'.\n      \n        Console.WriteLine(\">>>\");\n        var p1 = Path.Combine(@\"C:\\Temp\",@\"help.txt\");\n        Console.WriteLine(p1);\n        var p2 = Path.Combine(@\"C:\\Temp\\\",@\"help.txt\"); // The results are the same.\n        Console.WriteLine(p2);\n    }\n    private static void ShowContent(string path)\n    {\n        var directories = Directory.GetDirectories(path);\n        for (var i = 0; i < directories.Length; i++)\n        {\n            Console.WriteLine(directories[i]);\n        }\n        var files = Directory.GetFiles(path);\n        for (var i = 0; i < files.Length; i++)\n        {\n            Console.WriteLine(files[i]);\n        }\n    }\n}</code></pre>"}]