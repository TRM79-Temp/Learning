[{"title":"WebClient and Proxy usage","description":"","text":"<div class=\"code\">\n<span class=\"Namespace\">using</span>&nbsp;(<span class=\"Linq\">var</span>&nbsp;client&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;WebClient())<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;WebProxy&nbsp;p&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;WebProxy(<span class=\"String\">\"http://proxy.server:port/\"</span>,&nbsp;<span class=\"Keyword\">true</span>);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;p.Credentials&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;NetworkCredential(<span class=\"String\">\"domain\\\\user\"</span>,&nbsp;<span class=\"String\">\"password\"</span>);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;WebRequest.DefaultWebProxy&nbsp;=&nbsp;p;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;client.Proxy&nbsp;=&nbsp;p;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//...</span><br />\n}\n</div>"},{"title":"ToString() in structures","description":"Using the default operator","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ValueType\">struct</span>&nbsp;S<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"ValueType\">int</span>&nbsp;V;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"ValueType\">bool</span>&nbsp;B;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;S(<span class=\"ValueType\">int</span>&nbsp;V,&nbsp;<span class=\"ValueType\">bool</span>&nbsp;B)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Keyword\">this</span>.V&nbsp;=&nbsp;V;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Keyword\">this</span>.B&nbsp;=&nbsp;B;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">override</span>&nbsp;<span class=\"ReferenceType\">string</span>&nbsp;ToString()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">return</span>&nbsp;String.Format(<span class=\"String\">\"{0},&nbsp;{1}\"</span>,&nbsp;V,&nbsp;B);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;s1&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;S();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;s2&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;S(7,&nbsp;<span class=\"Keyword\">true</span>);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;s3&nbsp;=&nbsp;<span class=\"Modifier\">default</span>&nbsp;(S);<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(s1);&nbsp;<span class=\"InlineComment\">//&nbsp;0,&nbsp;False</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(s2);&nbsp;<span class=\"InlineComment\">//&nbsp;7,&nbsp;True</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(s3);&nbsp;<span class=\"InlineComment\">//&nbsp;0,&nbsp;False</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"Constructor cnaining","description":"","text":"<div class=\"code\">\n<span class=\"ReferenceType\">class</span>&nbsp;A<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"ValueType\">int</span>&nbsp;N;<br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;A()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class=\"String\">\"A::ctor()\"</span>);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"ReferenceType\">class</span>&nbsp;B:&nbsp;A<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;B()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class=\"String\">\"B::ctor()\"</span>);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B&nbsp;b&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;B();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;Output:</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;A::ctor()</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;B::ctor()</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"Using of nested classes","description":"Nested classes have access to their host's privates","text":"<div class=\"code\">\n<span class=\"ReferenceType\">class</span>&nbsp;A<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">private</span>&nbsp;<span class=\"ValueType\">int</span>&nbsp;N;<br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Nested<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Set(A&nbsp;a,&nbsp;<span class=\"ValueType\">int</span>&nbsp;N)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.N&nbsp;=&nbsp;N;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Show(A&nbsp;a)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(a.N);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;A(<span class=\"ValueType\">int</span>&nbsp;N)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Keyword\">this</span>.N&nbsp;=&nbsp;N;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;n&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;A.Nested();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;a1&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;A(7);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.Show(a1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;7</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.Set(a1,&nbsp;100500);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.Show(a1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;100500</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"Using interfaces","description":"Interface implementation must be only public","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">interface</span>&nbsp;II<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"ValueType\">void</span>&nbsp;M();<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;C:&nbsp;II<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;Interface&nbsp;implementation&nbsp;must&nbsp;be&nbsp;only&nbsp;public.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;Otherwise&nbsp;compiler&nbsp;generates&nbsp;an&nbsp;error:</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;error&nbsp;CS0737:&nbsp;'Test.C'&nbsp;does&nbsp;not&nbsp;implement&nbsp;interface&nbsp;member&nbsp;'Test.II.M()'.&nbsp;'Test.C.M()'&nbsp;cannot&nbsp;implement</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;interface&nbsp;member&nbsp;because&nbsp;it&nbsp;is&nbsp;not&nbsp;public.</span><br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;M()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"Modifier\">internal</span>&nbsp;<span class=\"Modifier\">sealed</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;II&nbsp;ic&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;C();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"IEnumerator GetEnumerator() in classes","description":"It makes possible use the class in the foreach loop (see the generic version in next snippet)","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Collection<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;NOTE&nbsp;The&nbsp;GetEnumerator&nbsp;method&nbsp;is&nbsp;defined&nbsp;with&nbsp;the&nbsp;interface&nbsp;IEnumerable.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;The&nbsp;foreach&nbsp;statement&nbsp;doesn’t&nbsp;really&nbsp;need&nbsp;this&nbsp;interface&nbsp;implemented&nbsp;in&nbsp;the&nbsp;collection</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;class.&nbsp;It’s&nbsp;enough&nbsp;to&nbsp;have&nbsp;a&nbsp;method&nbsp;with&nbsp;the&nbsp;name&nbsp;GetEnumerator&nbsp;that&nbsp;returns&nbsp;an</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;object&nbsp;implementing&nbsp;the&nbsp;IEnumerator&nbsp;interface.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;IEnumerator&nbsp;GetEnumerator()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">yield</span>&nbsp;<span class=\"Statement\">return</span>&nbsp;1;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">yield</span>&nbsp;<span class=\"Statement\">return</span>&nbsp;2;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">yield</span>&nbsp;<span class=\"Statement\">return</span>&nbsp;3;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">foreach</span>&nbsp;(<span class=\"ValueType\">int</span>&nbsp;n&nbsp;<span class=\"Statement\">in</span>&nbsp;<span class=\"Keyword\">new</span>&nbsp;Collection())<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(n);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"IEnumerator<T> GetEnumerator() in classes","description":"The generic version of the previous snippet","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Collection&lt;T&gt;<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">private</span>&nbsp;T[]&nbsp;_data;<br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;Collection(T[]&nbsp;data)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Keyword\">this</span>._data&nbsp;=&nbsp;data;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;IEnumerator&lt;T&gt;&nbsp;GetEnumerator()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">foreach</span>&nbsp;(<span class=\"Linq\">var</span>&nbsp;i&nbsp;<span class=\"Statement\">in</span>&nbsp;_data)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">yield</span>&nbsp;<span class=\"Statement\">return</span>&nbsp;i;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">foreach</span>&nbsp;(<span class=\"ValueType\">int</span>&nbsp;n&nbsp;<span class=\"Statement\">in</span>&nbsp;<span class=\"Keyword\">new</span>&nbsp;Collection&lt;<span class=\"ValueType\">int</span>&gt;(<span class=\"Keyword\">new</span>&nbsp;<span class=\"ValueType\">int</span>[]&nbsp;{1,&nbsp;2,&nbsp;3}))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(n);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"LinkedList<T> implementation","description":"[1, p.133-135]","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;LinkedListNode&lt;T&gt;<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;LinkedListNode(T&nbsp;value)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value&nbsp;=&nbsp;value;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;T&nbsp;Value&nbsp;{&nbsp;get;&nbsp;<span class=\"Modifier\">private</span>&nbsp;set;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;LinkedListNode&lt;T&gt;&nbsp;Next&nbsp;{&nbsp;get;&nbsp;<span class=\"Modifier\">internal</span>&nbsp;set;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;LinkedListNode&lt;T&gt;&nbsp;Prev&nbsp;{&nbsp;get;&nbsp;<span class=\"Modifier\">internal</span>&nbsp;set;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;LinkedList&lt;T&gt;:&nbsp;IEnumerable&lt;T&gt;<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;LinkedListNode&lt;T&gt;&nbsp;First&nbsp;{&nbsp;get;&nbsp;<span class=\"Modifier\">private</span>&nbsp;set;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;LinkedListNode&lt;T&gt;&nbsp;Last&nbsp;{&nbsp;get;&nbsp;<span class=\"Modifier\">private</span>&nbsp;set;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;LinkedListNode&lt;T&gt;&nbsp;AddLast(T&nbsp;node)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;newNode&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;LinkedListNode&lt;T&gt;(node);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">if</span>&nbsp;(First&nbsp;==&nbsp;<span class=\"Keyword\">null</span>)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First&nbsp;=&nbsp;newNode;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last&nbsp;=&nbsp;First;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">else</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedListNode&lt;T&gt;&nbsp;previous&nbsp;=&nbsp;Last;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last.Next&nbsp;=&nbsp;newNode;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last&nbsp;=&nbsp;newNode;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last.Prev&nbsp;=&nbsp;previous;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">return</span>&nbsp;newNode;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;IEnumerator&lt;T&gt;&nbsp;GetEnumerator()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedListNode&lt;T&gt;&nbsp;current&nbsp;=&nbsp;First;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">while</span>&nbsp;(current&nbsp;!=&nbsp;<span class=\"Keyword\">null</span>)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">yield</span>&nbsp;<span class=\"Statement\">return</span>&nbsp;current.Value;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current&nbsp;=&nbsp;current.Next;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;IEnumerator&nbsp;IEnumerable.GetEnumerator()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">return</span>&nbsp;GetEnumerator();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;list2&nbsp;=&nbsp;<span class=\"Keyword\">new</span>&nbsp;LinkedList&lt;<span class=\"ValueType\">int</span>&gt;();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list2.AddLast(1);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list2.AddLast(3);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list2.AddLast(5);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">foreach</span>&nbsp;(<span class=\"ValueType\">int</span>&nbsp;i&nbsp;<span class=\"Statement\">in</span>&nbsp;list2)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"IEnumerable","description":"System.Collections.IEnumerable","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">interface</span>&nbsp;IEnumerable<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;[Pure]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;[DispId(-4)]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;IEnumerator&nbsp;GetEnumerator();<br />\n}\n</div>"},{"title":"IEnumerator","description":"System.Collections.IEnumerator","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">interface</span>&nbsp;IEnumerator<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"ValueType\">bool</span>&nbsp;MoveNext();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;Current&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"ValueType\">void</span>&nbsp;Reset();<br />\n}\n</div>"},{"title":"IEnumerable implementation","description":"","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;LinkedList:&nbsp;IEnumerable<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;...</span><br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;IEnumerator&nbsp;GetEnumerator()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedListNode&nbsp;current&nbsp;=&nbsp;First;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">while</span>&nbsp;(current&nbsp;!=&nbsp;<span class=\"Keyword\">null</span>)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">yield</span>&nbsp;<span class=\"Statement\">return</span>&nbsp;current.Value;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current&nbsp;=&nbsp;current.Next;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"IEnumerable<T>","description":"System.Collections.Generic.IEnumerable<T>","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">interface</span>&nbsp;IEnumerable&lt;<span class=\"MethodParameter\">out</span>&nbsp;T&gt;&nbsp;:&nbsp;IEnumerable<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Keyword\">new</span>&nbsp;IEnumerator&lt;T&gt;&nbsp;GetEnumerator();<br />\n}\n</div>"},{"title":"IEnumerator<T>","description":"System.Collections.Generic.IEnumerator<T>","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">interface</span>&nbsp;IEnumerator&lt;<span class=\"MethodParameter\">out</span>&nbsp;T&gt;&nbsp;:&nbsp;IDisposable,&nbsp;IEnumerator<br />\n{&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Keyword\">new</span>&nbsp;T&nbsp;Current&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"IEnumerable<T> implementation","description":"","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;LinkedList&lt;T&gt;:&nbsp;IEnumerable&lt;T&gt;<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;See&nbsp;full&nbsp;code&nbsp;in&nbsp;the&nbsp;example&nbsp;above.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;IEnumerator&lt;T&gt;&nbsp;GetEnumerator()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedListNode&lt;T&gt;&nbsp;current&nbsp;=&nbsp;First;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">while</span>&nbsp;(current&nbsp;!=&nbsp;<span class=\"Keyword\">null</span>)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">yield</span>&nbsp;<span class=\"Statement\">return</span>&nbsp;current.Value;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current&nbsp;=&nbsp;current.Next;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;IEnumerator&nbsp;IEnumerable.GetEnumerator()&nbsp;=&gt;&nbsp;GetEnumerator();<br />\n}\n</div>"},{"title":"Static in generics","description":"","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;StaticDemo&lt;T&gt;<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">int</span>&nbsp;x;<br />\n}<br />\n<br />\n<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;The&nbsp;next&nbsp;2&nbsp;lines&nbsp;can&nbsp;be&nbsp;initialized&nbsp;anywhere&nbsp;in&nbsp;a&nbsp;program.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StaticDemo&lt;<span class=\"ReferenceType\">string</span>&gt;.x&nbsp;=&nbsp;4;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StaticDemo&lt;<span class=\"ValueType\">int</span>&gt;.x&nbsp;=&nbsp;5;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(StaticDemo&lt;<span class=\"ReferenceType\">string</span>&gt;.x);&nbsp;<span class=\"InlineComment\">//&nbsp;4</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(StaticDemo&lt;<span class=\"ValueType\">int</span>&gt;.x);&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;5</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"typeof","description":"","text":"<div class=\"code\">\n<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;n&nbsp;=&nbsp;100;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//var&nbsp;t1&nbsp;=&nbsp;typeof(n);&nbsp;&nbsp;&nbsp;//&nbsp;Does&nbsp;not&nbsp;work.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;t1&nbsp;=&nbsp;n.GetType();<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;t2&nbsp;=&nbsp;<span class=\"Keyword\">typeof</span>(<span class=\"ValueType\">int</span>);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(t1);&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;System.Int32</span><br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(t2);&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;System.Int32</span><br />\n&nbsp;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;sType&nbsp;=&nbsp;<span class=\"Keyword\">typeof</span>(String);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(sType);&nbsp;<span class=\"InlineComment\">//&nbsp;System.String</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"},{"title":"Delegates composition","description":"","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;Func&lt;T1,&nbsp;TResult&gt;&nbsp;Compose&lt;T1,&nbsp;T2,&nbsp;TResult&gt;(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T1,&nbsp;T2&gt;&nbsp;f1,&nbsp;Func&lt;T2,&nbsp;TResult&gt;&nbsp;f2)&nbsp;=&gt;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&gt;&nbsp;f2(f1(a));<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;Func&lt;T1,&nbsp;TResult&gt;&nbsp;Compose&lt;T1,&nbsp;T2,&nbsp;TResult&gt;(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T1,&nbsp;T2&gt;&nbsp;f1,&nbsp;Func&lt;T2,&nbsp;TResult&gt;&nbsp;f2)<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">return</span>&nbsp;a&nbsp;=&gt;&nbsp;f2(f1(a));<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;Func&lt;T1,&nbsp;TResult&gt;&nbsp;Compose&lt;T1,&nbsp;T2,&nbsp;TResult&gt;(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T1,&nbsp;T2&gt;&nbsp;f1,&nbsp;Func&lt;T2,&nbsp;TResult&gt;&nbsp;f2)<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">return</span>&nbsp;<span class=\"Keyword\">new</span>&nbsp;Func&lt;T1,&nbsp;TResult&gt;(a&nbsp;=&gt;&nbsp;f2(f1(a)));<br />\n}<br />\n<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;Func&lt;T1,&nbsp;TResult&gt;&nbsp;Compose&lt;T1,&nbsp;T2,&nbsp;TResult&gt;(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T1,&nbsp;T2&gt;&nbsp;f1,&nbsp;Func&lt;T2,&nbsp;TResult&gt;&nbsp;f2)<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">return</span>&nbsp;<span class=\"ReferenceType\">delegate</span>(T1&nbsp;a)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">return</span>&nbsp;f2(f1(a));<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br />\n}\n</div>"},{"title":"Func<> delegates","description":"","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">delegate</span>&nbsp;TResult&nbsp;Func&lt;<span class=\"MethodParameter\">out</span>&nbsp;TResult&gt;();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">delegate</span>&nbsp;TResult&nbsp;Func&lt;<span class=\"Statement\">in</span>&nbsp;T,&nbsp;<span class=\"MethodParameter\">out</span>&nbsp;TResult&gt;(T&nbsp;arg);<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">delegate</span>&nbsp;TResult&nbsp;Func&lt;<span class=\"Statement\">in</span>&nbsp;T1,&nbsp;<span class=\"Statement\">in</span>&nbsp;T2,&nbsp;<span class=\"MethodParameter\">out</span>&nbsp;TResult&gt;(T1&nbsp;arg1,&nbsp;T2&nbsp;arg2);<br />\n<span class=\"InlineComment\">//&nbsp;...</span><br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">delegate</span>&nbsp;TResult&nbsp;Func&lt;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">in</span>&nbsp;T1,&nbsp;<span class=\"Statement\">in</span>&nbsp;T2,&nbsp;<span class=\"Statement\">in</span>&nbsp;T3,&nbsp;<span class=\"Statement\">in</span>&nbsp;T4,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">in</span>&nbsp;T5,&nbsp;<span class=\"Statement\">in</span>&nbsp;T6,&nbsp;<span class=\"Statement\">in</span>&nbsp;T7,&nbsp;<span class=\"Statement\">in</span>&nbsp;T8,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">in</span>&nbsp;T9,&nbsp;<span class=\"Statement\">in</span>&nbsp;T10,&nbsp;<span class=\"Statement\">in</span>&nbsp;T11,&nbsp;<span class=\"Statement\">in</span>&nbsp;T12,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">in</span>&nbsp;T13,&nbsp;<span class=\"Statement\">in</span>&nbsp;T14,&nbsp;<span class=\"Statement\">in</span>&nbsp;T15,&nbsp;<span class=\"Statement\">in</span>&nbsp;T16,&nbsp;<span class=\"MethodParameter\">out</span>&nbsp;TResult&gt;(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T1&nbsp;arg1,&nbsp;T2&nbsp;arg2,&nbsp;T3&nbsp;arg3,&nbsp;T4&nbsp;arg4,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T5&nbsp;arg5,&nbsp;T6&nbsp;arg6,&nbsp;T7&nbsp;arg7,&nbsp;T8&nbsp;arg8,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T9&nbsp;arg9,&nbsp;T10&nbsp;arg10,&nbsp;T11&nbsp;arg11,&nbsp;T12&nbsp;arg12,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T13&nbsp;arg13,&nbsp;T14&nbsp;arg14,&nbsp;T15&nbsp;arg15,&nbsp;T16&nbsp;arg16);\n</div>"},{"title":"Comparison<> delegate","description":"","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"ReferenceType\">delegate</span>&nbsp;<span class=\"ValueType\">int</span>&nbsp;Comparison&lt;<span class=\"Statement\">in</span>&nbsp;T&gt;(T&nbsp;x,&nbsp;T&nbsp;y);\n</div>"},{"title":"The System.Object class","description":"","text":"<div class=\"code\">\n<span class=\"InlineComment\">//&nbsp;Type:</span><br />\nSystem.Object<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Constructors:</span><br />\n<span class=\"Modifier\">public</span>&nbsp;.ctor();<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Methods:</span><br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">bool</span>&nbsp;Equals(<span class=\"ReferenceType\">object</span>&nbsp;objA,&nbsp;<span class=\"ReferenceType\">object</span>&nbsp;objB);<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">bool</span>&nbsp;ReferenceEquals(<span class=\"ReferenceType\">object</span>&nbsp;objA,&nbsp;<span class=\"ReferenceType\">object</span>&nbsp;objB);<br />\n<span class=\"Modifier\">public</span>&nbsp;Type&nbsp;GetType();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;<span class=\"ValueType\">bool</span>&nbsp;Equals(<span class=\"ReferenceType\">object</span>&nbsp;obj);<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;<span class=\"ValueType\">int</span>&nbsp;GetHashCode();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;<span class=\"ReferenceType\">string</span>&nbsp;ToString();<br />\n<span class=\"Modifier\">protected</span>&nbsp;<span class=\"ReferenceType\">object</span>&nbsp;MemberwiseClone();<br />\n<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Finalize();<br />\n<span class=\"Modifier\">private</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;FieldGetter(<span class=\"ReferenceType\">string</span>&nbsp;typeName,&nbsp;<span class=\"ReferenceType\">string</span>&nbsp;fieldName,&nbsp;<span class=\"MethodParameter\">ref</span>&nbsp;Object&amp;&nbsp;val);<br />\n<span class=\"Modifier\">private</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;FieldSetter(<span class=\"ReferenceType\">string</span>&nbsp;typeName,&nbsp;<span class=\"ReferenceType\">string</span>&nbsp;fieldName,&nbsp;<span class=\"ReferenceType\">object</span>&nbsp;val);<br />\n<span class=\"Modifier\">private</span>&nbsp;FieldInfo&nbsp;GetFieldInfo(<span class=\"ReferenceType\">string</span>&nbsp;typeName,&nbsp;<span class=\"ReferenceType\">string</span>&nbsp;fieldName);<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Properties:</span><br />\n-\n</div>"},{"title":"Using delegate inside a method","description":"","text":"<div class=\"code\">\nFunc&lt;MethodInfo,&nbsp;MethodInfo,&nbsp;<span class=\"ValueType\">int</span>&gt;&nbsp;CompareByVisibility<br />\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span class=\"ReferenceType\">delegate</span>(MethodInfo&nbsp;x,&nbsp;MethodInfo&nbsp;y)<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;...</span><br />\n}\n</div>"},{"title":"A delegate internals","description":"","text":"<div class=\"code\">\n<span class=\"ReferenceType\">class</span>&nbsp;D:&nbsp;System.MulticastDelegate,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;System.ICloneable,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;System.Runtime.Serialization.ISerializable<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Constructors:</span><br />\n<span class=\"Modifier\">public</span>&nbsp;.ctor(System.Object&nbsp;<span class=\"ReferenceType\">object</span>,&nbsp;System.IntPtr&nbsp;method);<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Methods:</span><br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Boolean&nbsp;Equals(System.Object&nbsp;obj);<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Int32&nbsp;GetHashCode();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Delegate[]&nbsp;GetInvocationList();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;GetObjectData(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Runtime.Serialization.SerializationInfo&nbsp;info,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Runtime.Serialization.StreamingContext&nbsp;context);<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Delegate&nbsp;CombineImpl(System.Delegate&nbsp;follow);<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Type&nbsp;GetType();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.String&nbsp;ToString();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Reflection.MethodInfo&nbsp;GetMethodImpl();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Delegate&nbsp;RemoveImpl(System.Delegate&nbsp;value);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Boolean&nbsp;InvocationListLogicallyNull();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Boolean&nbsp;IsUnmanagedFunctionPtr();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.MulticastDelegate&nbsp;NewMulticastDelegate(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Object[]&nbsp;invocationList,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Int32&nbsp;invocationCount);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Void&nbsp;StoreDynamicMethod(&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Reflection.MethodInfo&nbsp;dynamicMethod);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Object&nbsp;GetTarget();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Object&nbsp;MemberwiseClone();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;Finalize();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Object&nbsp;DynamicInvoke(System.Object[]&nbsp;args);<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Reflection.MethodInfo&nbsp;get_Method();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Object&nbsp;get_Target();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Object&nbsp;Clone();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Object&nbsp;DynamicInvokeImpl(System.Object[]&nbsp;args);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;AdjustTarget(&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Object&nbsp;target,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.IntPtr&nbsp;methodPtr);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IRuntimeMethodInfo&nbsp;FindMethodHandle();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;GetCallStub(System.IntPtr&nbsp;methodPtr);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;GetInvokeMethod();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;GetMulticastInvoke();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.IAsyncResult&nbsp;BeginInvoke(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;System.AsyncCallback&nbsp;callback,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;System.Object&nbsp;<span class=\"ReferenceType\">object</span>);<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;EndInvoke(System.IAsyncResult&nbsp;result);<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;Invoke();<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Properties:</span><br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Reflection.MethodInfo&nbsp;Method&nbsp;{&nbsp;get;&nbsp;}<br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Object&nbsp;Target&nbsp;{&nbsp;get;&nbsp;}\n</div>"},{"title":"IAsyncResult","description":"","text":"<div class=\"code\">\n<span class=\"InlineComment\">//&nbsp;Type:</span><br />\nSystem.IAsyncResult<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Methods:</span><br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Object&nbsp;get_AsyncState();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Threading.WaitHandle&nbsp;get_AsyncWaitHandle();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Boolean&nbsp;get_CompletedSynchronously();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Boolean&nbsp;get_IsCompleted();<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Properties:</span><br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Boolean&nbsp;IsCompleted&nbsp;{&nbsp;get;&nbsp;}<br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Threading.WaitHandle&nbsp;AsyncWaitHandle&nbsp;{&nbsp;get;&nbsp;}<br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Object&nbsp;AsyncState&nbsp;{&nbsp;get;&nbsp;}<br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Boolean&nbsp;CompletedSynchronously&nbsp;{&nbsp;get;&nbsp;}\n</div>"},{"title":"AsyncCallback","description":"","text":"<div class=\"code\">\n<span class=\"InlineComment\">//&nbsp;Type:</span><br />\nSystem.AsyncCallback<br />\n[<span class=\"Modifier\">sealed</span>]<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Base&nbsp;Type:</span><br />\nSystem.MulticastDelegate<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Interfaces:</span><br />\nSystem.ICloneable<br />\nSystem.Runtime.Serialization.ISerializable<br />\n<br />\n-------------------------------------------------<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Constructors:</span><br />\n<span class=\"Modifier\">public</span>&nbsp;.ctor(System.Object&nbsp;<span class=\"ReferenceType\">object</span>,&nbsp;System.IntPtr&nbsp;method);<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Methods:</span><br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Boolean&nbsp;Equals(System.Object&nbsp;obj);<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Int32&nbsp;GetHashCode();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Delegate[]&nbsp;GetInvocationList();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;GetObjectData(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Runtime.Serialization.SerializationInfo&nbsp;info,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Runtime.Serialization.StreamingContext&nbsp;context);<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Delegate&nbsp;CombineImpl(System.Delegate&nbsp;follow);<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Type&nbsp;GetType();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.String&nbsp;ToString();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Reflection.MethodInfo&nbsp;GetMethodImpl();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Delegate&nbsp;RemoveImpl(System.Delegate&nbsp;value);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Boolean&nbsp;InvocationListLogicallyNull();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Boolean&nbsp;IsUnmanagedFunctionPtr();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.MulticastDelegate&nbsp;NewMulticastDelegate(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Object[]&nbsp;invocationList,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Int32&nbsp;invocationCount);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Void&nbsp;StoreDynamicMethod(&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Reflection.MethodInfo&nbsp;dynamicMethod);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Object&nbsp;GetTarget();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.Object&nbsp;MemberwiseClone();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;Finalize();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Object&nbsp;DynamicInvoke(System.Object[]&nbsp;args);<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Reflection.MethodInfo&nbsp;get_Method();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Object&nbsp;get_Target();<br />\n▲&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Object&nbsp;Clone();<br />\n▲&nbsp;<span class=\"Modifier\">protected</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Object&nbsp;DynamicInvokeImpl(System.Object[]&nbsp;args);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;AdjustTarget(&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Object&nbsp;target,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.IntPtr&nbsp;methodPtr);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IRuntimeMethodInfo&nbsp;FindMethodHandle();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;GetCallStub(System.IntPtr&nbsp;methodPtr);<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;GetInvokeMethod();<br />\n▲&nbsp;*&nbsp;<span class=\"Modifier\">protected</span>&nbsp;System.IntPtr&nbsp;GetMulticastInvoke();<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.IAsyncResult&nbsp;BeginInvoke(<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.IAsyncResult&nbsp;ar,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.AsyncCallback&nbsp;callback,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Object&nbsp;<span class=\"ReferenceType\">object</span>);<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;EndInvoke(System.IAsyncResult&nbsp;result);<br />\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">virtual</span>&nbsp;System.Void&nbsp;Invoke(System.IAsyncResult&nbsp;ar);<br />\n<br />\n<span class=\"InlineComment\">//&nbsp;Properties:</span><br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Reflection.MethodInfo&nbsp;Method&nbsp;{&nbsp;get;&nbsp;}<br />\n•&nbsp;<span class=\"Modifier\">public</span>&nbsp;System.Object&nbsp;Target&nbsp;{&nbsp;get;&nbsp;}\n</div>"},{"title":"Paths processing","description":"","text":"<div class=\"code\">\n<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ReferenceType\">class</span>&nbsp;Program<br />\n{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">public</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;Main()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;path1&nbsp;=&nbsp;Path.GetFullPath(@<span class=\"String\">\"C:\\Temp\"</span>);&nbsp;&nbsp;<span class=\"InlineComment\">//&nbsp;C:\\Temp</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;path2&nbsp;=&nbsp;Path.GetFullPath(@<span class=\"String\">\"C:\\Temp\\\");&nbsp;<span class=\"InlineComment\">//&nbsp;C:\\Temp\\</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.Write(\"</span>Path&nbsp;exists:&nbsp;<span class=\"String\">\");<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(Directory.Exists(path1));&nbsp;//&nbsp;True.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.Write(\"</span>Path&nbsp;exists:&nbsp;<span class=\"String\">\");<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(Directory.Exists(path2));&nbsp;//&nbsp;True.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(\"</span>&gt;&gt;&gt;<span class=\"String\">\");<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowContent(path1);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(\"</span>&gt;&gt;&gt;<span class=\"String\">\");&nbsp;//&nbsp;The&nbsp;results&nbsp;are&nbsp;the&nbsp;same.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowContent(path2);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(\"</span>&gt;&gt;&gt;<span class=\"String\">\");<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileInfo&nbsp;fi&nbsp;=&nbsp;new&nbsp;FileInfo(@\"</span>C:\\Temp\\help.txt<span class=\"String\">\");<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(fi.Directory);&nbsp;<span class=\"InlineComment\">//&nbsp;By&nbsp;default,&nbsp;a&nbsp;path&nbsp;does&nbsp;not&nbsp;end&nbsp;with&nbsp;'\\'.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(\"</span>&gt;&gt;&gt;<span class=\"String\">\");<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p1&nbsp;=&nbsp;Path.Combine(@\"</span>C:\\Temp<span class=\"String\">\",@\"</span>help.txt<span class=\"String\">\");<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(p1);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p2&nbsp;=&nbsp;Path.Combine(@\"</span>C:\\Temp\\<span class=\"String\">\",@\"</span>help.txt\");&nbsp;<span class=\"InlineComment\">//&nbsp;The&nbsp;results&nbsp;are&nbsp;the&nbsp;same.</span><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(p2);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Modifier\">private</span>&nbsp;<span class=\"Modifier\">static</span>&nbsp;<span class=\"ValueType\">void</span>&nbsp;ShowContent(<span class=\"ReferenceType\">string</span>&nbsp;path)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;directories&nbsp;=&nbsp;Directory.GetDirectories(path);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">for</span>&nbsp;(<span class=\"Linq\">var</span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;directories.Length;&nbsp;i++)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(directories[i]);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Linq\">var</span>&nbsp;files&nbsp;=&nbsp;Directory.GetFiles(path);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"Statement\">for</span>&nbsp;(<span class=\"Linq\">var</span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;files.Length;&nbsp;i++)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(files[i]);<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}\n</div>"}]