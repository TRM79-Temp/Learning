[{"title":"Listing 2.2","description":"","text":"<pre><code class=\"csharp hljs\">\nstatic ArrayList GenerateNames()\n{\n    ArrayList names = new ArrayList();\n    names.Add(\"Gamma\");\n    names.Add(\"Vlissides\");\n    names.Add(\"Johnson\");\n    names.Add(\"Helm\");\n    return names;\n}\n\nstatic void PrintNames(ArrayList names)\n{\n    foreach(string name in names)\n    {\n        Console.WriteLine(name);\n    }\n}\n</code></pre>"},{"title":"Generics","description":"","text":"<pre><code class=\"csharp hljs\">\npublic class Bookshelf\n{\n    public IEnumerable<Book> Books { get { ... } }\n}\n</code></pre>"},{"title":"Anonymous types","description":"","text":"<pre><code class=\"csharp hljs\">\nvar book = new { Title = \"Lost in the Snow\", Author = \"Holly Webb\" };\nstring title = book.Title;\nstring author = book.Author;\n</code></pre>"},{"title":"Implicitly typed local variables","description":"","text":"<pre><code class=\"csharp hljs\">\nDictionary<string, string> map1 = new Dictionary<string, string>();\nvar map2 = new Dictionary<string, string>();\n</code></pre>"},{"title":"Tuples","description":"","text":"<pre><code class=\"csharp hljs\">\nvar book = (title: \"Lost in the Snow\", author: \"Holly Webb\");\nConsole.WriteLine(book.title);\n</code></pre>"},{"title":"Events evolution","description":"","text":"<pre><code class=\"csharp hljs\">\nbutton.Click += new EventHandler(HandleButtonClick); // C# 1\nbutton.Click += HandleButtonClick; // C# 2\nbutton.Click += delegate { MessageBox.Show(\"Clicked!\"); }; // C# 2\nbutton.Click += (sender, args) => MessageBox.Show(\"Clicked!\"); // C# 3\n</code></pre>"},{"title":"Object and Collection initializers","description":"","text":"<pre><code class=\"csharp hljs\">\nvar customer = new Customer();\ncustomer.Name = \"Jon\";\ncustomer.Address = \"UK\";\nvar item1 = new OrderItem();\nitem1.ItemId = \"abcd123\";\nitem1.Quantity = 1;\nvar item2 = new OrderItem();\nitem2.ItemId = \"fghi456\";\nitem2.Quantity = 2;\nvar order = new Order();\norder.OrderId = \"xyz\";\norder.Customer = customer;\norder.Items.Add(item1);\norder.Items.Add(item2);\n</code></pre>\nvs\n<pre><code class=\"csharp hljs\">\nvar order = new Order\n{\n    OrderId = \"xyz\",\n    Customer = new Customer { Name = \"Jon\", Address = \"UK\" },\n    Items = {\n        new OrderItem { ItemId = \"abcd123\", Quantity = 1 },\n        new OrderItem { ItemId = \"fghi456\", Quantity = 2 }\n    }\n};\n</code></pre>"},{"title":"Properties","description":"","text":"Common properties:\n<pre><code class=\"csharp hljs\">\nprivate string name;\npublic string Name\n{\n    get { return name; }\n    set { name = value; }\n}\n</code></pre>\nAutomatically implemented properties:\n<pre><code class=\"csharp hljs\">\npublic string Name { get; set; }\n</code></pre>"},{"title":"Expression-bodied members","description":"","text":"Prior to C# 6:\n<pre><code class=\"csharp hljs\">\npublic int Count { get { return list.Count; } }\npublic IEnumerator<string> GetEnumerator()\n{\n    return list.GetEnumerator();\n}\n</code></pre>\nC# 6:\n<pre><code class=\"csharp hljs\">\npublic int Count => list.Count;\npublic IEnumerator<string> GetEnumerator() => list.GetEnumerator();\n</code></pre>"},{"title":"String handling","description":"","text":"Prior to C# 6:\n<pre><code class=\"csharp hljs\">\nthrow new KeyNotFoundException(\n    \"No calendar system for ID \" + id + \" exists\");\n</code></pre>\nor:\n<pre><code class=\"csharp hljs\">\nthrow new KeyNotFoundException(\n    string.Format(\"No calendar system for ID {0} exists\", id);\n</code></pre>\nC# 6:\n<pre><code class=\"csharp hljs\">\nthrow new KeyNotFoundException($\"No calendar system for ID {id} exists\");\n</code></pre>"},{"title":"LINQ","description":"","text":"<pre><code class=\"csharp hljs\">\nvar offers =\n    from product in db.Products\n    where product.SalePrice <= product.Price / 2\n    orderby product.SalePrice\n    select new {\n        product.Id, product.Description,\n        product.SalePrice, product.Price\n    };\n</code></pre>"},{"title":"Asynchrony","description":"","text":"<pre><code class=\"csharp hljs\">\nprivate async Task UpdateStatus()\n{\n    Task <Weather> weatherTask = GetWeatherAsync();\n    Task <EmailStatus> emailTask = GetEmailStatusAsync();\n    Weather weather = await weatherTask;\n    EmailStatus email = await emailTask;\n    weatherLabel.Text = weather.Description;\n    inboxLabel.Text = email.InboxCount.ToString();\n}\n</code></pre>"},{"title":"Listing 2.1","description":"","text":"<pre><code class=\"csharp hljs\">\nstatic string[] GenerateNames()\n{\n    string[] names = new string[4];\n    names[0] = \"Gamma\";\n    names[1] = \"Vlissides\";\n    names[2] = \"Johnson\";\n    names[3] = \"Helm\";\n    return names;\n}\n\nstatic void PrintNames(string[] names)\n{\n    foreach(string name in names)\n    {\n        Console.WriteLine(name);\n    }\n}\n</code></pre>"},{"title":"Listing 2.2","description":"","text":"<pre><code class=\"csharp hljs\">\nstatic ArrayList GenerateNames()\n{\n    ArrayList names = new ArrayList();\n    names.Add(\"Gamma\");\n    names.Add(\"Vlissides\");\n    names.Add(\"Johnson\");\n    names.Add(\"Helm\");\n    return names;\n}\n\nstatic void PrintNames(ArrayList names)\n{\n    foreach(string name in names)\n    {\n        Console.WriteLine(name);\n    }\n}\n</code></pre>"},{"title":"Listing 2.3","description":"","text":"<pre><code class=\"csharp hljs\">\nstatic StringCollection GenerateNames()\n{\n    StringCollection names = new StringCollection();\n    names.Add(\"Gamma\");\n    names.Add(\"Vlissides\");\n    names.Add(\"Johnson\");\n    names.Add(\"Helm\");\n    return names;\n}\n\nstatic void PrintNames(StringCollection names)\n{\n    foreach(string name in names)\n    {\n        Console.WriteLine(name);\n    }\n}\n</code></pre>"},{"title":"Listing 2.4","description":"","text":"<pre><code class=\"csharp hljs\">\nstatic List<string> GenerateNames()\n{\n    List<string> names = new List<string>();\n    names.Add(\"Gamma\");\n    names.Add(\"Vlissides\");\n    names.Add(\"Johnson\");\n    names.Add(\"Helm\");\n    return names;\n}\n\nstatic void PrintNames(List<string> names)\n{\n    foreach(string name in names)\n    {\n        Console.WriteLine(name);\n    }\n}\n</code></pre>"},{"title":"Listing 2.5","description":"","text":"<pre><code class=\"csharp hljs\">\npublic static List<T> CopyAtMost<T>(\n    List<T> input, int maxElements)\n{\n    int actualCount = Math.Min(input.Count, maxElements);\n    List<T> ret = new List<T> (actualCount);\n    for (int i = 0; i < actualCount; i++)\n    {\n        ret.Add(input[i]);\n    }\n    return ret;\n}\n\nstatic void Main()\n{\n    List<int> numbers = new List<int>();\n    numbers.Add(5);\n    numbers.Add(10);\n    numbers.Add(20);\n    List<int> firstTwo = CopyAtMost<int>(numbers, 2);\n    Console.WriteLine(firstTwo.Count);\n}\n</code></pre>"}]